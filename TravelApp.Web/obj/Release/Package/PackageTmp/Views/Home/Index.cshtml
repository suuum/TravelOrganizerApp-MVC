@{
    ViewBag.Title = "Home";
}
<style>
    #map {
        height: 400px;
        width: 100%;
       }
    </style>
<div class="spacing"></div>

    <h3>Szybkie określenie trasy pomiędzy dwoma punktami</h3>
<div class="row">
    <div class="col-sm-2">
        <input id="origin-input" class="form-control" style="max-width:250px;" type="text"
               placeholder="Wpisz punkt startowy">
    </div>

    <div class="col-sm-2">
        <input id="destination-input" class="form-control" style="max-width:250px;" type="text"
               placeholder="Wpisz punkt koncowy">
    </div>

    <div id="mode-selector" class="controls">
        <input type="radio" name="type" id="changemode-transit" checked="checked">
        <label for="changemode-transit">Komunikacja miejska</label>

        <input type="radio" name="type" id="changemode-driving">
        <label for="changemode-driving">Jazda samochodem</label>

        <input type="radio" name="type" id="changemode-walking" >
        <label for="changemode-walking">Pieszo</label>
    </div>
</div>
    <div id="map"></div>
<div class="spacing"></div>
<div id="right-panel">
 
</div>
    <script>
      function initMap() {
       var origin_place_id = null;
        var destination_place_id = null;
        var travel_mode = 'TRANSIT';
        var map = new google.maps.Map(document.getElementById('map'), {
          mapTypeControl: false,
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13
        });
        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer({
            draggable: true,
            map: map,
            panel: document.getElementById('right-panel')
        });
        var origin_input = document.getElementById('origin-input');
        var destination_input = document.getElementById('destination-input');
        var modes = document.getElementById('mode-selector');

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);

        var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
        origin_autocomplete.bindTo('bounds', map);
        var destination_autocomplete =
            new google.maps.places.Autocomplete(destination_input);
        destination_autocomplete.bindTo('bounds', map);

        function setupClickListener(id, mode) {
            var radioButton = document.getElementById(id);
            radioButton.addEventListener('click', function () {
                travel_mode = mode;
            });
        }
        setupClickListener('changemode-walking', 'WALKING');
        setupClickListener('changemode-transit', 'TRANSIT');
        setupClickListener('changemode-driving', 'DRIVING');

        function expandViewportToFitPlace(map, place) {
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }
        }

        origin_autocomplete.addListener('place_changed', function () {
            var place = origin_autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }
            expandViewportToFitPlace(map, place);

            origin_place_id = place.place_id;
            route(origin_place_id, destination_place_id, travel_mode,
                  directionsService, directionsDisplay);
        });

        destination_autocomplete.addListener('place_changed', function () {
            var place = destination_autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }
            expandViewportToFitPlace(map, place);

            // If the place has a geometry, store its place ID and route if we have
            // the other place ID
            destination_place_id = place.place_id;
            route(origin_place_id, destination_place_id, travel_mode,
                  directionsService, directionsDisplay);
        });

        function route(origin_place_id, destination_place_id, travel_mode,
                       directionsService, directionsDisplay) {
            if (!origin_place_id || !destination_place_id) {
                return;
            }
            directionsService.route({
                origin: { 'placeId': origin_place_id },
                destination: { 'placeId': destination_place_id },
                travelMode: travel_mode
            }, function (response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }
      }

    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB7TuDy5i6VjDIPVm6zvGnZS3MS19Id1Jo&libraries=places&callback=initMap">
    </script>
